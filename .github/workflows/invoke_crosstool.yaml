---
name: Invoke `crosstool-ng`

on:
  workflow_call:
    inputs:
      runner_labels_json: { type: string, required: true }
      crosstool_host_os: { type: string, required: true }
      build_host: { type: string, required: true }
      target_host: { type: string, required: true }
      build_script: { type: string, required: true }
      canadian_build: { type: boolean, required: false, default: false }
      fetch_bootstrap: { type: boolean, required: false, default: true }
      toolchain_suffix: { type: string, required: false, default: "" }
      phase_number: { type: number, required: true }
      crosstool_args: { type: string, required: false, default: "+finish" }
      restore_state: { type: boolean, required: false, default: true }
      save_state: { type: boolean, required: false, default: true }
      toolchain_tarball: { type: boolean, required: false, default: false }

jobs:
  invoke-crosstool:
    name: ${{ inputs.phase_number }}. ct-ng ${{ inputs.crosstool_args }}
    runs-on: ${{ fromJSON(inputs.runner_labels_json) }}

    steps:
      - name: Clone toolchains repo for prereqs
        uses: actions/checkout@v4

      - name: Prerequisites (Linux)
        if: ${{ runner.os == 'Linux' }}
        run: |
          ./ubuntu-prereqs.sh
          echo "$HOME/.local/crosstool-ng/bin" >> $GITHUB_PATH

      - name: Prerequisites (macOS)
        if: ${{ runner.os == 'macOS' }}
        run: |
          brew install autoconf automake bash binutils coreutils gawk gnu-sed help2man make meson ncurses pkg-config python3
          echo "$HOME/.local/crosstool-ng/bin" >> $GITHUB_PATH

      - name: Show disk space available - before
        run: |
          df -h

      - name: Maximize build space for Linux
        uses: easimon/maximize-build-space@master
        if: ${{ runner.os == 'Linux' }}
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"
          remove-docker-images: "true"

      - name: Setup workdir on Linux
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo mkdir /t
          sudo mount --bind $GITHUB_WORKSPACE /t
          echo "TC_WORKDIR=/t" >> $GITHUB_ENV
          echo "EXECUTE_UNDER_DOCKER=1" >> $GITHUB_ENV

      - name: Setup workdir everywhere else
        if: ${{ runner.os != 'Linux' }}
        run: |
          echo "TC_WORKDIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV

      - name: Create case-sensitive workspace volume for macOS
        if: ${{ runner.os == 'macOS' }}
        run: |
          cd $HOME
          find $GITHUB_WORKSPACE -mindepth 1 -maxdepth 1 -type d -exec rm -rf '{}' \; -prune
          find $GITHUB_WORKSPACE -type f -exec rm -rf '{}' \;
          counter=10
          while [[ $counter -gt 0 ]] ; do
            if [[ -z "$(mount 2>/dev/null| grep $GITHUB_WORKSPACE)" ]]; then
              break
            fi
            hdiutil detach $GITHUB_WORKSPACE -force || true
            counter=$(( counter - 1 ))
            sleep 15
          done
          counter=10
          while [[ $counter -gt 0 ]] ; do
            if [[ ! -z "$(mount 2>/dev/null| grep $GITHUB_WORKSPACE)" ]]; then
              break
            fi
            rm -rf $HOME/Workspace.sparseimage || true
            hdiutil create $HOME/Workspace.sparseimage -volname toolchains -type SPARSE -size 80g -fs HFSX
            hdiutil attach $HOME/Workspace.sparseimage -mountpoint $GITHUB_WORKSPACE
            counter=$(( counter - 1 ))
            sleep 15
          done
          cd $GITHUB_WORKSPACE

      - name: Show disk space available - after
        run: |
          df -h

      - name: Clone toolchains repo
        uses: actions/checkout@v4

      - name: Download copy of crosstool-ng
        uses: actions/download-artifact@v4
        with:
          name: crosstool.${{ inputs.crosstool_host_os }}

      - name: Extract copy of crosstool-ng
        run: |
          tar xf ct-ng.tar -C $HOME

      - name: Download source tarballs
        uses: actions/download-artifact@v4
        with:
          name: tarballs.tar

      - name: Extract source tarballs
        run: |
          tar xf tarballs.tar

      - name: Download bootstrap toolchain
        if: ${{ inputs.fetch_bootstrap && runner.os == 'Linux' }}
        uses: actions/download-artifact@v4
        with:
          name: toolchain-host_${{ inputs.crosstool_host_os }}-target_${{ inputs.crosstool_host_os }}_qmk_bootstrap

      - name: Extract bootstrap toolchain
        if: ${{ inputs.fetch_bootstrap && runner.os == 'Linux' }}
        run: |
          mkdir -p toolchains
          tar xf qmk_toolchain*host_${{ inputs.crosstool_host_os }}-target_${{ inputs.crosstool_host_os }}_qmk_bootstrap.tar.xz -C toolchains
          rm qmk_toolchain*host_${{ inputs.crosstool_host_os }}-target_${{ inputs.crosstool_host_os }}_qmk_bootstrap.tar.xz

      - name: Download canadian host toolchain
        if: ${{ inputs.canadian_build }}
        uses: actions/download-artifact@v4
        with:
          name: toolchain-host_${{ inputs.crosstool_host_os }}-target_${{ inputs.build_host }}

      - name: Extract canadian host toolchain
        if: ${{ inputs.canadian_build }}
        run: |
          mkdir -p toolchains
          tar xf qmk_toolchain*host_${{ inputs.crosstool_host_os }}-target_${{ inputs.build_host }}.tar.xz -C toolchains
          rm qmk_toolchain*host_${{ inputs.crosstool_host_os }}-target_${{ inputs.build_host }}.tar.xz

      - name: Download build state
        if: ${{ inputs.restore_state }}
        uses: actions/download-artifact@v4
        with:
          name: state-host_${{ inputs.build_host }}-target_${{ inputs.target_host }}${{ inputs.toolchain_suffix }}

      - name: Extract build state
        if: ${{ inputs.restore_state }}
        run: |
          cd $TC_WORKDIR
          # Ensure tarballs are extracted before we restore state as we've deleted $CT_COMMON_SRC_DIR before saving the state tarball
          ./${{ inputs.build_script }} +companion_tools_for_build
          # Extract the state tarball
          tar xf state-host_${{ inputs.build_host }}-target_${{ inputs.target_host }}${{ inputs.toolchain_suffix }}.tar

      - name: Build toolchain
        run: |
          cd $TC_WORKDIR
          if [ "$RUNNER_OS" == "macOS" ]; then
            export PATH="$PATH:/usr/local/opt/binutils/bin:/usr/local/opt/coreutils/bin:/usr/local/opt/libtool/libexec/gnubin"
            export CPPFLAGS="-I/usr/local/opt/ncurses/include -I/usr/local/opt/gettext/include"
            export LDFLAGS="-L/usr/local/opt/ncurses/lib -L/usr/local/opt/gettext/lib"
            export PATH="$PATH:/opt/homebrew/opt/binutils/bin:/opt/homebrew/opt/coreutils/bin:/opt/homebrew/opt/libtool/libexec/gnubin"
            export CPPFLAGS="$CPPFLAGS -I/opt/homebrew/opt/ncurses/include -I/opt/homebrew/opt/gettext/include"
            export LDFLAGS="$LDFLAGS -L/opt/homebrew/opt/ncurses/lib -L/opt/homebrew/opt/gettext/lib"
            # Prefer to target Monterey
            export MACOSX_DEPLOYMENT_TARGET=12.0
          fi
          # Kick off the requested build phase (kill after 5h45m so logs can be gathered)
          timeout 19800 ./${{ inputs.build_script }} ${{ inputs.crosstool_args }}

      - name: Upload build logs
        uses: actions/upload-artifact@v4
        if: ${{ always() && !cancelled() }}
        with:
          name: build.log-host_${{ inputs.build_host }}-target_${{ inputs.target_host }}${{ inputs.toolchain_suffix }}-phase${{ inputs.phase_number }}
          path: |
            **/*.log

      - name: Make build state
        if: ${{ inputs.save_state }}
        run: |
          # We're saving state so we can resume at each step -- some of the internal build directories can be blown away as restarting from a step will recreate them.
          if [ "$RUNNER_OS" == "macOS" ]; then
            export PATH="$PATH:/usr/local/opt/coreutils/bin"
            export STAT="gstat"
          else
            export STAT="stat"
          fi
          latest_state=$(dirname $(find $(find build -mindepth 4 -maxdepth 5 -type d -name state) -mindepth 2 -maxdepth 2 -type f -name env.sh -print0 | xargs -0r $STAT -c '%w|%n' | sort | cut -d'|' -f2 | tail -n1))
          tar cf state-host_${{ inputs.build_host }}-target_${{ inputs.target_host }}${{ inputs.toolchain_suffix }}.tar $latest_state

      - name: Upload build state
        if: ${{ inputs.save_state }}
        uses: actions/upload-artifact@v4
        with:
          name: state-host_${{ inputs.build_host }}-target_${{ inputs.target_host }}${{ inputs.toolchain_suffix }}
          path: state-host_${{ inputs.build_host }}-target_${{ inputs.target_host }}${{ inputs.toolchain_suffix }}.tar
          overwrite: true

      - name: Make toolchain tarball
        if: ${{ inputs.toolchain_tarball }}
        run: |
          if [ "$RUNNER_OS" == "macOS" ]; then
            export PATH="$PATH:/usr/local/opt/coreutils/bin"
            export STAT="gstat"
          else
            export STAT="stat"
          fi
          if [[ "${{ inputs.build_host }}" == "windowsX64" ]] || [[ "${{ inputs.build_host }}" == "windowsARM64" ]]; then
            export DEREF_SYMLINKS_ARGS="--dereference --hard-dereference"
          fi
          latest_state=$(dirname $(find $(find build -mindepth 4 -maxdepth 5 -type d -name state) -mindepth 2 -maxdepth 2 -type f -name env.sh -print0 | xargs -0r $STAT -c '%w|%n' | sort | cut -d'|' -f2 | tail -n1))
          source "$latest_state/env.sh"
          tar cf qmk_toolchain-gcc${CT_GCC_VERSION}-host_${{ inputs.build_host }}-target_${{ inputs.target_host }}${{ inputs.toolchain_suffix }}.tar -C toolchains host_${{ inputs.build_host }}-target_${{ inputs.target_host }}${{ inputs.toolchain_suffix }} ${DEREF_SYMLINKS_ARGS:-}
          xz -T 0 -z -9 -e qmk_toolchain-gcc${CT_GCC_VERSION}-host_${{ inputs.build_host }}-target_${{ inputs.target_host }}${{ inputs.toolchain_suffix }}.tar

      - name: Upload toolchain
        if: ${{ inputs.toolchain_tarball }}
        uses: actions/upload-artifact@v4
        with:
          name: toolchain-host_${{ inputs.build_host }}-target_${{ inputs.target_host }}${{ inputs.toolchain_suffix }}
          path: |
            qmk_toolchain-gcc*-host_${{ inputs.build_host }}-target_${{ inputs.target_host }}${{ inputs.toolchain_suffix }}.tar.xz

      - name: Unmount case-sensitive workspace volume for macOS
        if: always()
        run: |
          if [ "$RUNNER_OS" == "macOS" ]; then
            cd $HOME
            find $GITHUB_WORKSPACE -mindepth 1 -maxdepth 1 -type d -exec rm -rf '{}' \; -prune
            find $GITHUB_WORKSPACE -type f -exec rm -rf '{}' \;

            counter=10
            while [[ $counter -gt 0 ]] ; do
              if [[ -z "$(mount 2>/dev/null| grep $GITHUB_WORKSPACE)" ]]; then
                break
              fi
              hdiutil detach $GITHUB_WORKSPACE -force || true
              counter=$(( counter - 1 ))
              sleep 15
            done

            rm -rf $HOME/Workspace.sparseimage || true
          fi
